"use client";

import * as React from "react";
import { useRouter } from "next/navigation";
import {
  Shield,
  Bug,
  Network,
  Activity,
  Clock,
  FileText,
  Filter,
  AlertTriangle,
  GitBranch,
  Settings2,
  ArrowLeft,
  Copy as CopyIcon,
} from "lucide-react";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import {
  Table,
  TableHeader,
  TableRow,
  TableHead,
  TableBody,
  TableCell,
} from "@/components/ui/table";
import { Alert, AlertDescription } from "@/components/ui/alert";

/* ------------------------------- Types ------------------------------- */

type ScanStatus = "Queued" | "Running" | "Completed" | "Failed";
type Severity = "Critical" | "High" | "Medium" | "Low" | "Info";

type ScanRun = {
  id: string;
  target: string; // IP/CIDR/FQDN
  scope: string; // "External" | "Internal" | etc.
  toolchain: string; // "Nmap + Nuclei" ...
  startedAt: string;
  duration: string; // "04m32s"
  status: ScanStatus;
  findings: number;
  critical: number;
  high: number;
};

type Finding = {
  id: string;
  host: string;
  port: string;
  service: string;
  cve?: string;
  title: string;
  severity: Severity;
  recommendation: string;
};

/* ------------------------------- Demo data -------------------------------- */

const SCANS: ScanRun[] = [
  {
    id: "scan-2401",
    target: "10.10.0.0/24",
    scope: "Internal",
    toolchain: "Nmap(Fast) + Nuclei(Core)",
    startedAt: "2024-12-20 09:14",
    duration: "03m48s",
    status: "Completed",
    findings: 18,
    critical: 1,
    high: 4,
  },
  {
    id: "scan-2402",
    target: "app.prod.example.com",
    scope: "External",
    toolchain: "Nmap(Full TCP) + Nuclei(Web)",
    startedAt: "2024-12-22 21:02",
    duration: "07m11s",
    status: "Completed",
    findings: 11,
    critical: 0,
    high: 2,
  },
  {
    id: "scan-2403",
    target: "192.168.1.0/25",
    scope: "Internal",
    toolchain: "Nmap + Nuclei + Naabu",
    startedAt: "2024-12-23 10:31",
    duration: "—",
    status: "Running",
    findings: 0,
    critical: 0,
    high: 0,
  },
];

const FINDINGS: Finding[] = [
  {
    id: "f-001",
    host: "10.10.0.12",
    port: "443/tcp",
    service: "https",
    cve: "CVE-2023-23924",
    title: "TLS weak cipher / misconfig",
    severity: "High",
    recommendation:
      "Désactiver TLS 1.0/1.1, supprimer les suites RC4/3DES, activer HSTS.",
  },
  {
    id: "f-002",
    host: "10.10.0.42",
    port: "22/tcp",
    service: "ssh",
    title: "Default banner / weak kex",
    severity: "Medium",
    recommendation:
      "Durcir sshd_config (KexAlgorithms, Ciphers), bannière minimale, MFA admins.",
  },
  {
    id: "f-003",
    host: "app.prod.example.com",
    port: "443/tcp",
    service: "https",
    cve: "CVE-2022-37434",
    title: "Librairie vulnérable détectée via Nuclei",
    severity: "High",
    recommendation:
      "Mettre à jour la dépendance affectée, ajouter SCA en CI, tests de régression.",
  },
  {
    id: "f-004",
    host: "10.10.0.5",
    port: "80/tcp",
    service: "http",
    title: "Server header exposé",
    severity: "Low",
    recommendation: "Masquer server tokens, activer security headers (CSP…).",
  },
];

/* --------------------------- Helpers UI ----------------------------- */

function statusBadge(s: ScanStatus) {
  switch (s) {
    case "Completed":
      return <Badge variant="outline">Completed</Badge>;
    case "Running":
      return <Badge>Running</Badge>;
    case "Queued":
      return <Badge variant="secondary">Queued</Badge>;
    case "Failed":
      return (
        <Badge className="bg-red-600 text-white hover:bg-red-600/90">
          Failed
        </Badge>
      );
  }
}

function severityBadge(sev: Severity) {
  const base = "px-2 py-0.5 text-xs";
  if (sev === "Critical") {
    return (
      <Badge className={`${base} bg-red-600 text-white hover:bg-red-600/90`}>
        Critical
      </Badge>
    );
  }
  if (sev === "High") return <Badge className={base}>High</Badge>;
  if (sev === "Medium")
    return (
      <Badge variant="secondary" className={base}>
        Medium
      </Badge>
    );
  if (sev === "Low")
    return (
      <Badge variant="outline" className={base}>
        Low
      </Badge>
    );
  return (
    <Badge variant="outline" className={base}>
      Info
    </Badge>
  );
}

function CodeBlock({ lang, code }: { lang: string; code: string }) {
  const [copied, setCopied] = React.useState(false);
  const onCopy = async () => {
    try {
      await navigator.clipboard.writeText(code);
      setCopied(true);
      setTimeout(() => setCopied(false), 1200);
    } catch {}
  };
  return (
    <div className="relative">
      <pre className="overflow-x-auto rounded-md bg-zinc-900 p-4 text-sm text-zinc-100">
        <code className="whitespace-pre">{code}</code>
      </pre>
      <Button
        variant="outline"
        size="sm"
        onClick={onCopy}
        className="absolute right-2 top-2"
      >
        <CopyIcon className="mr-1 h-4 w-4" />
        {copied ? "Copié" : "Copier"}
      </Button>
      <span className="sr-only">{lang}</span>
    </div>
  );
}

/* --------------------------------- Page ---------------------------------- */

export default function VulnerabilityScannerPage() {
  const router = useRouter();
  const [tab, setTab] = React.useState("overview");
  const [q, setQ] = React.useState("");

  const filteredFindings = FINDINGS.filter(
    (f) =>
      f.host.toLowerCase().includes(q.toLowerCase()) ||
      f.service.toLowerCase().includes(q.toLowerCase()) ||
      (f.cve ?? "").toLowerCase().includes(q.toLowerCase()) ||
      f.title.toLowerCase().includes(q.toLowerCase())
  );

  const KPIS = [
    {
      label: "Cibles scannées",
      value: "256",
      icon: <Network className="h-5 w-5 text-blue-500" />,
    },
    {
      label: "Vulnérabilités (dernière exécution)",
      value: "18",
      icon: <Bug className="h-5 w-5 text-amber-500" />,
    },
    {
      label: "Critiques / Hautes",
      value: "1 / 4",
      icon: <AlertTriangle className="h-5 w-5 text-red-500" />,
    },
    {
      label: "Temps moyen (scan)",
      value: "4m12s",
      icon: <Clock className="h-5 w-5 text-emerald-500" />,
    },
  ];

  const TABS = [
    { value: "overview", label: "Overview", icon: Settings2 },
    { value: "scans", label: "Scans", icon: Activity },
    { value: "findings", label: "Findings", icon: Bug },
    { value: "reports", label: "Reports", icon: FileText },
    { value: "cicd", label: "CI/CD", icon: GitBranch },
  ] as const;

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <div className="border-b bg-background/80 backdrop-blur supports-[backdrop-filter]:bg-background/60">
        <div className="container py-4">
          <div className="mb-3">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => router.push("/projects")}
            >
              <ArrowLeft className="mr-2 h-4 w-4" />
              Retour aux projets
            </Button>
          </div>

          {/* Header Responsive */}
          <div className="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
            <div className="flex items-center gap-3">
              <div className="rounded-lg border border-emerald-300/40 bg-emerald-50 px-2.5 py-2 dark:bg-emerald-900/20">
                <Shield className="h-5 w-5 text-emerald-600 dark:text-emerald-400" />
              </div>
              <div>
                <h1 className="text-2xl font-semibold tracking-tight">
                  Scanner de Vulnérabilités — Custom
                </h1>
                <p className="text-sm text-muted-foreground">
                  Outil de scan automatisé, parsers, rapports et intégration
                  CI/CD (fail build si sévérité critique).
                </p>
              </div>
            </div>

            <div className="flex items-center gap-2">
              <Badge variant="outline">v1.0</Badge>
              <Badge variant="outline" className="text-muted-foreground">
                Demo pack
              </Badge>
            </div>
          </div>
        </div>
      </div>

      {/* Body */}
      <div className="container space-y-8 py-6">
        {/* Bandeau sécurité/valeur */}
        <Alert>
          <AlertDescription>
            <strong>Positionnement :</strong> pipeline réutilisable (Nmap/Naabu
            + Nuclei) → normalisation → scoring → rapports (Markdown/CSV/JSON) →
            export SIEM/ELK. Conçu pour <em>montrer de l’impact</em> côté prod
            et CI/CD.
          </AlertDescription>
        </Alert>

        {/* KPIs */}
        <div className="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4">
          {KPIS.map((k) => (
            <Card key={k.label}>
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-xs text-muted-foreground">{k.label}</p>
                    <p className="text-xl font-semibold">{k.value}</p>
                  </div>
                  {k.icon}
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Tabs (Responsive) */}
        <Tabs value={tab} onValueChange={setTab} className="space-y-6">
          {/* Mobile select */}
          <div className="md:hidden">
            <label
              htmlFor="tabSelect"
              className="mb-2 block text-sm font-medium text-foreground"
            >
              Section
            </label>
            <div className="relative">
              <select
                id="tabSelect"
                value={tab}
                onChange={(e) => setTab(e.target.value)}
                className="block w-full appearance-none rounded-md border bg-background px-3 py-2 pr-10 text-sm shadow-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring"
              >
                {TABS.map((t) => (
                  <option key={t.value} value={t.value}>
                    {t.label}
                  </option>
                ))}
              </select>
              <svg
                className="pointer-events-none absolute right-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground"
                viewBox="0 0 20 20"
                fill="currentColor"
                aria-hidden="true"
              >
                <path d="M5.23 7.21a.75.75 0 011.06.02L10 11.207l3.71-3.975a.75.75 0 011.08 1.04l-4.24 4.54a.75.75 0 01-1.08 0l-4.24-4.54a.75.75 0 01.02-1.06z" />
              </svg>
            </div>
          </div>

          {/* Desktop tablist */}
          <TabsList
            aria-label="Sections"
            className="hidden w-full grid-cols-5 gap-2 rounded-lg border bg-muted/50 p-1 md:grid"
          >
            {TABS.map(({ value, label, icon: Icon }) => (
              <TabsTrigger
                key={value}
                value={value}
                aria-label={label}
                className="inline-flex h-9 items-center justify-center rounded-md border bg-background px-3 text-sm font-medium text-foreground shadow-sm transition-colors hover:bg-accent hover:text-accent-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 data-[state=active]:border-primary data-[state=active]:bg-primary data-[state=active]:text-primary-foreground"
              >
                <Icon className="mr-2 h-4 w-4" />
                {label}
              </TabsTrigger>
            ))}
          </TabsList>

          {/* OVERVIEW */}
          <TabsContent value="overview">
            <div className="grid grid-cols-1 gap-6 lg:grid-cols-2">
              <Card>
                <CardHeader className="pb-3">
                  <CardTitle>Chaîne d’outils & principes</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3 text-sm text-muted-foreground">
                  <ul className="list-disc space-y-2 pl-5">
                    <li>
                      <strong>Découverte</strong> : Nmap / Naabu (TCP/UDP) —
                      profils rapide/complet.
                    </li>
                    <li>
                      <strong>Vulnérabilités</strong> : Nuclei (templates core +
                      custom), NSE ciblés.
                    </li>
                    <li>
                      <strong>Normalisation</strong> : JSON unifié
                      (host/service/CVE/severity/source).
                    </li>
                    <li>
                      <strong>Score</strong> : mapping CVSS + contexte
                      (exposition, asset criticality).
                    </li>
                    <li>
                      <strong>Exports</strong> : Markdown (lecture), CSV (BI),
                      JSON (ELK/SIEM).
                    </li>
                  </ul>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="pb-3">
                  <CardTitle>Architecture (simplifiée)</CardTitle>
                </CardHeader>
                <CardContent className="text-sm text-muted-foreground">
                  <div className="rounded-lg border bg-muted p-4">
                    <p className="mb-2 font-medium text-foreground">Flux</p>
                    <ul className="grid grid-cols-2 gap-2 list-disc pl-5">
                      <li>Runner CI → Docker toolchain</li>
                      <li>Ingest JSON → Parse/merge</li>
                      <li>Score → Filtres seuils</li>
                      <li>Artifacts → Markdown/CSV/JSON</li>
                      <li>Webhook → ELK/SIEM</li>
                      <li>Fail build si critical &gt; 0</li>
                    </ul>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* SCANS */}
          <TabsContent value="scans">
            <Card>
              <CardHeader className="pb-3">
                <div className="flex flex-col gap-3 md:flex-row md:items-center md:justify-between">
                  <CardTitle>Exécutions</CardTitle>
                  <div className="flex w-full items-center gap-2 md:w-auto">
                    <Input
                      placeholder="Filtrer par cible / scope / statut"
                      value={q}
                      onChange={(e) => setQ(e.target.value)}
                      className="w-full md:w-72"
                    />
                    <Button variant="outline" disabled>
                      <Filter className="mr-2 h-4 w-4" />
                      Filtres
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="overflow-x-auto rounded-md border bg-background">
                  <Table className="min-w-[720px]">
                    <TableHeader>
                      <TableRow>
                        <TableHead>ID</TableHead>
                        <TableHead>Cible</TableHead>
                        <TableHead>Scope</TableHead>
                        <TableHead>Toolchain</TableHead>
                        <TableHead>Départ</TableHead>
                        <TableHead>Durée</TableHead>
                        <TableHead>Statut</TableHead>
                        <TableHead>Findings</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {SCANS.filter(
                        (s) =>
                          s.id.includes(q) ||
                          s.target.toLowerCase().includes(q.toLowerCase()) ||
                          s.scope.toLowerCase().includes(q.toLowerCase()) ||
                          s.status.toLowerCase().includes(q.toLowerCase())
                      ).map((s) => (
                        <TableRow key={s.id}>
                          <TableCell className="font-medium">{s.id}</TableCell>
                          <TableCell>{s.target}</TableCell>
                          <TableCell>{s.scope}</TableCell>
                          <TableCell className="text-sm text-muted-foreground">
                            {s.toolchain}
                          </TableCell>
                          <TableCell>{s.startedAt}</TableCell>
                          <TableCell>{s.duration}</TableCell>
                          <TableCell>{statusBadge(s.status)}</TableCell>
                          <TableCell>
                            <div className="flex items-center gap-2">
                              <Badge variant="outline">{s.findings}</Badge>
                              <Badge className="bg-red-600 text-white hover:bg-red-600/90">
                                {s.critical}C
                              </Badge>
                              <Badge>{s.high}H</Badge>
                            </div>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* FINDINGS */}
          <TabsContent value="findings">
            <Card>
              <CardHeader className="pb-3">
                <CardTitle>Vulnérabilités détectées</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="overflow-x-auto rounded-md border bg-background">
                  <Table className="min-w-[720px]">
                    <TableHeader>
                      <TableRow>
                        <TableHead>Hôte</TableHead>
                        <TableHead>Port/Service</TableHead>
                        <TableHead>CVE</TableHead>
                        <TableHead>Titre</TableHead>
                        <TableHead>Sévérité</TableHead>
                        <TableHead>Remédiation</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {filteredFindings.map((f) => (
                        <TableRow key={f.id}>
                          <TableCell className="font-medium">
                            {f.host}
                          </TableCell>
                          <TableCell>
                            {f.port} — {f.service}
                          </TableCell>
                          <TableCell>{f.cve ?? "—"}</TableCell>
                          <TableCell>{f.title}</TableCell>
                          <TableCell>{severityBadge(f.severity)}</TableCell>
                          <TableCell className="text-sm text-muted-foreground">
                            {f.recommendation}
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* REPORTS */}
          <TabsContent value="reports">
            <div className="grid grid-cols-1 gap-6 lg:grid-cols-2">
              <Card>
                <CardHeader className="pb-3">
                  <CardTitle>Rapport Markdown (extrait)</CardTitle>
                </CardHeader>
                <CardContent>
                  <CodeBlock
                    lang="md"
                    code={`# Rapport de Scan — 10.10.0.0/24
- Date: 2024-12-20 09:14
- Toolchain: Nmap(Fast) + Nuclei(Core)
- Durée: 03m48s
- Résumé: 18 findings (1 Critical, 4 High)

## Critique
- 10.10.0.12:443 — TLS misconfig (CVE-2023-23924)
  - Remédiation: désactiver TLS 1.0/1.1, HSTS, supprimer RC4/3DES.

## Hautes (extrait)
- app.prod.example.com:443 — Librairie vulnérable (CVE-2022-37434)
  - Remédiation: mise à jour + SCA en CI

## Recommandations globales
- Enforcement Security Headers (CSP, HSTS)
- Durcissement SSH (kex/ciphers), MFA admins
- Patch management + SCA automatisé
`}
                  />
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="pb-3">
                  <CardTitle>Payload JSON (pour ELK/SIEM)</CardTitle>
                </CardHeader>
                <CardContent>
                  <CodeBlock
                    lang="json"
                    code={`{
  "scan_id": "scan-2401",
  "toolchain": "nmap+nuclei",
  "started_at": "2024-12-20T09:14:00Z",
  "targets": ["10.10.0.0/24"],
  "summary": { "findings": 18, "critical": 1, "high": 4 },
  "items": [
    {
      "host": "10.10.0.12",
      "port": "443",
      "service": "https",
      "cve": "CVE-2023-23924",
      "severity": "High",
      "title": "TLS misconfig",
      "recommendation": "Disable TLS 1.0/1.1, remove RC4/3DES, enable HSTS"
    }
  ]
}`}
                  />
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* CI/CD */}
          <TabsContent value="cicd">
            <div className="grid grid-cols-1 gap-6 lg:grid-cols-2">
              <Card>
                <CardHeader className="pb-3">
                  <CardTitle>GitHub Actions (Docker toolchain)</CardTitle>
                </CardHeader>
                <CardContent>
                  <CodeBlock
                    lang="yaml"
                    code={`name: vuln-scan
on:
  workflow_dispatch:
  schedule: [{ cron: "0 2 * * 1" }] # Lundi 02:00
jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run scanner
        run: |
          docker run --rm \\
            -v \${{ github.workspace }}:/work \\
            myorg/vuln-scanner:latest \\
            --target "10.10.0.0/24" --profile fast \\
            --out-json /work/report.json --out-md /work/report.md
      - name: Fail on critical
        run: |
          CRIT=$(jq '.summary.critical' report.json)
          if [ "$CRIT" -gt 0 ]; then
            echo "Critical findings: $CRIT"; exit 1; fi
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vuln-reports
          path: |
            report.json
            report.md`}
                  />
                </CardContent>
              </Card>

              <Card className="lg:col-span-2">
                <CardHeader className="pb-3">
                  <CardTitle>Commandes (local runner)</CardTitle>
                </CardHeader>
                <CardContent className="grid gap-4 md:grid-cols-2">
                  <CodeBlock
                    lang="bash"
                    code={`# Découverte rapide
nmap -T4 -F -oX nmap_fast.xml 10.10.0.0/24

# Découverte complète TCP
nmap -T3 -p- -sV -oX nmap_full.xml 10.10.0.0/24

# Vulnérabilités (web core)
nuclei -u https://app.prod.example.com -severity medium,high,critical -json -o nuclei.json

# Merge + report
vuln-merge --nmap nmap_full.xml --nuclei nuclei.json --out-json report.json --out-md report.md`}
                  />
                  <CodeBlock
                    lang="bash"
                    code={`# Envoi ELK
curl -XPOST "http://elk:9200/vuln-scans/_doc" \\
  -H "Content-Type: application/json" \\
  -d @report.json

# Seuils qualité (CI)
jq '.summary' report.json
jq '.summary.critical' report.json`}
                  />
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
